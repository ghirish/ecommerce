// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?  // Optional for OAuth users
  role      UserRole @default(CUSTOMER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  addresses    Address[]
  orders       Order[]
  reviews      Review[]
  wishlistItems WishlistItem[]
  cartItems    CartItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product models
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id             String        @id @default(cuid())
  name           String
  description    String
  price          Float
  compareAtPrice Float?
  images         String[]
  categoryId     String
  stock          Int           @default(0)
  sku            String        @unique
  status         ProductStatus @default(DRAFT)
  rating         Float         @default(0)
  reviewCount    Int           @default(0)
  tags           String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

// Cart models
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  userId    String?
  productId String
  sessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User?   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

// Wishlist models
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Address models
model Address {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User    @relation(fields: [userId], references: [id])
  shippingOrders  Order[] @relation("ShippingAddress")
  billingOrders   Order[] @relation("BillingAddress")

  @@map("addresses")
}

// Order models
model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  total             Float
  subtotal          Float
  tax               Float         @default(0)
  shipping          Float         @default(0)
  discount          Float         @default(0)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentIntentId   String?
  userId            String
  shippingAddressId String
  billingAddressId  String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  shippingAddress Address   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  VENDOR
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
